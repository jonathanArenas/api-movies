{"version":3,"file":"Query.js","names":["Query","ping","getMovies","Movie_catalog","find","Movies","getMovieById","_","_id","findById","Movie","login","email","password","response","status","User","findOne","user","bcrypt","compare","isValid","payload","userId","id","token","createToken"],"sources":["../../../src/graphql/resolvers/Query.js"],"sourcesContent":["import Movie_catalog from '../../models/Movies_catalog'\r\nimport User from '../../models/User'\r\nimport createToken from '../../utils'\r\nimport bcrypt from 'bcryptjs';\r\n\r\nconst Query = {\r\n    ping() {\r\n        return 'pong'\r\n    },\r\n    async getMovies() {\r\n        const Movies = await Movie_catalog.find()\r\n        return Movies\r\n    },\r\n    async getMovieById(_, { _id }) {\r\n        const Movie = await Movie_catalog.findById(_id)\r\n        return Movie\r\n    },\r\n\r\n    async login(_, { email, password }) {\r\n        if (!password || !email) {\r\n            return{\r\n              response: 'invalid credentials',\r\n              status: false\r\n            }\r\n          }\r\n          try {\r\n            // Busca el usuario unico en la BD busco correo electronico\r\n            const user = await User.findOne({\r\n              email: email,\r\n            });\r\n            // Validamos si el usuario exite\r\n            if (!user) {\r\n              return{\r\n                response: 'invalid credentials',\r\n                status: false\r\n              }\r\n            }\r\n        \r\n            // compara el password enviado con el de la base de datos\r\n            const isValid = await bcrypt.compare(password, user.password);\r\n        \r\n            // Compara si es valido el password\r\n            if (!isValid) {\r\n              return{\r\n                response: 'invalid credentials',\r\n                status: false\r\n              }\r\n            }\r\n        \r\n            const payload = {\r\n              userId: user.id,\r\n              email: user.email\r\n            };\r\n            // este es el Token @.\r\n            const token = createToken(payload);\r\n            return {\r\n              response: token,\r\n              status: true\r\n            }\r\n          }catch(error) {\r\n            return 'Error la hacer login'\r\n          }\r\n    }\r\n\r\n}\r\nexport default Query"],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AAA8B;AAAA,+CAF9B;AAAA;AAAA;AAIA,IAAMA,KAAK,GAAG;EACVC,IAAI,kBAAG;IACH,OAAO,MAAM;EACjB,CAAC;EACKC,SAAS,uBAAG;IAAA;MAAA;MAAA;QAAA;UAAA;YAAA;cAAA;cAAA,OACOC,0BAAa,CAACC,IAAI,EAAE;YAAA;cAAnCC,MAAM;cAAA,iCACLA,MAAM;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;EACjB,CAAC;EACKC,YAAY,wBAACC,CAAC,QAAW;IAAA;MAAA;MAAA;QAAA;UAAA;YAAA;cAAPC,GAAG,QAAHA,GAAG;cAAA;cAAA,OACHL,0BAAa,CAACM,QAAQ,CAACD,GAAG,CAAC;YAAA;cAAzCE,KAAK;cAAA,kCACJA,KAAK;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;EAChB,CAAC;EAEKC,KAAK,iBAACJ,CAAC,SAAuB;IAAA;MAAA;MAAA;QAAA;UAAA;YAAA;cAAnBK,KAAK,SAALA,KAAK,EAAEC,QAAQ,SAARA,QAAQ;cAAA,MACxB,CAACA,QAAQ,IAAI,CAACD,KAAK;gBAAA;gBAAA;cAAA;cAAA,kCACb;gBACJE,QAAQ,EAAE,qBAAqB;gBAC/BC,MAAM,EAAE;cACV,CAAC;YAAA;cAAA;cAAA;cAAA,OAIkBC,gBAAI,CAACC,OAAO,CAAC;gBAC9BL,KAAK,EAAEA;cACT,CAAC,CAAC;YAAA;cAFIM,IAAI;cAAA,IAILA,IAAI;gBAAA;gBAAA;cAAA;cAAA,kCACD;gBACJJ,QAAQ,EAAE,qBAAqB;gBAC/BC,MAAM,EAAE;cACV,CAAC;YAAA;cAAA;cAAA,OAImBI,oBAAM,CAACC,OAAO,CAACP,QAAQ,EAAEK,IAAI,CAACL,QAAQ,CAAC;YAAA;cAAvDQ,OAAO;cAAA,IAGRA,OAAO;gBAAA;gBAAA;cAAA;cAAA,kCACJ;gBACJP,QAAQ,EAAE,qBAAqB;gBAC/BC,MAAM,EAAE;cACV,CAAC;YAAA;cAGGO,OAAO,GAAG;gBACdC,MAAM,EAAEL,IAAI,CAACM,EAAE;gBACfZ,KAAK,EAAEM,IAAI,CAACN;cACd,CAAC,EACD;cACMa,KAAK,GAAG,IAAAC,iBAAW,EAACJ,OAAO,CAAC;cAAA,kCAC3B;gBACLR,QAAQ,EAAEW,KAAK;gBACfV,MAAM,EAAE;cACV,CAAC;YAAA;cAAA;cAAA;cAAA,kCAEM,sBAAsB;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;EAErC;AAEJ,CAAC;AAAA,eACcf,KAAK;AAAA"}